- Class: meta
  Course: Statistik I
  Lesson: Termin I
  Author: Ulf Mertens
  Type: Standard
  Organization: University of Heidelberg
  Version: 2.2.16

- Class: text
  Output: In dieser Einheit werden wir die Grundlagen von R wiederholen. Wenn ihr die Antwort nicht wisst, koennt ihr ueber "play()" pausieren und selbst versuchen die Loesung zu finden. Wenn das ohne Erfolg ist, dann findet ihr zu jeder Frage einen Hint, in dem etwas genauer erklaert wird, wie ihr vorgehen muesst.

- Class: figure
  Output: Dann fangen wir mal an...
  Figure: timer_start.R
  FigureType: new

- Class: cmd_question
  Output: Erstelle einen Vektor mit den Zahlen 1,2 und 3.
  CorrectAnswer: c(1,2,3)
  AnswerTests: omnitest(correctExpr='c(1,2,3)')
  Hint: Moechten wir mehrere Zahlen in einen Vektor speichern, muessen wir das ueber den 'c()'-Befehl machen, wobei die einzelnen Zahlen durch ein Komma getrennt werden muessen. Das    "c" steht hier fuer combine. So sollte es aussehen, 'c(1,2,3)'.

- Class: cmd_question
  Output: Erstelle nun bitte einen Vektor mit zehn 1en, zehn 2en und zehn 3en. Versuche das mithilfe einer Funktion, also bitte nicht alle Zahlen eingeben.
  CorrectAnswer: rep(c(1,2,3),each=10)
  AnswerTests: omnitest(correctExpr='rep(c(1,2,3),each=10)')
  Hint: "Gluecklicherweise koennen wir uns das Tippen sparen, hierfuer gibt es eine Funktion, die uns die Arbeit weitgehend abnimmt. Wir werden im Laufe des Semesters noch mehr ueber Funktionen lernen, aber vorerst verwenden wir sie einfach. Zurueck zu unserem Vektor, Die Funktion 'rep' steht fuer repeat. Moechten wir die Zahlen 1 und 2 jeweils 5-mal wiederholen, schreiben wir 'rep(c(1,2),each=5)'. Wir sagen R: Nimm die Zahl 1, und schreibe sie 5 mal, nimm dann die Zahl 2 und schreibe sie 5 mal. Die Loesung hier also waere 'rep(c(1,2,3),each=10)'."

- Class: cmd_question
  Output: Soweit so gut. Was nun, wenn wir damit weiterrechnen moechten? Also z.B jede
    Zahl um einen Wert erhoehen? (Warum auch immer das von Interesse sein sollte).
    Es ist laestig, jedes Mal aufs Neue den Vektor hinschreiben zu muessen, speichere daher
    den Vektor in eine Variable namens 'y' ab. 
  CorrectAnswer: y <- rep(c(1,2,3),each=10)
  AnswerTests: omnitest(correctExpr='y <- rep(c(1,2,3),each=10)')
  Hint: Das funktioniert ueber den sog. assignment-Operator '<-'. Wenn man die Zahl 1 einer Variable 'x'      zuordnen moechte, schreibt man 'x <- 1'. Den Vektor, der mit rep() erstellt wurde, ordnen wir der Variable 'y' zu, so 'y <- rep(c(1,2,3),each=10)'

- Class: cmd_question
  Output: Very well, jetzt addieren wir jede Zahl des Vektors 'y' mit 1 und speichern das Ergebnis in eine Variable 'k'.
  CorrectAnswer: k <- y + 1
  AnswerTests: omnitest(correctExpr='k <- y + 1')
  Hint: In R kann man das auf zwei Arten machen, wir waehlen (voerst) die einfache Variante. Wir addieren schlicht und einfach 1 und speichern das Ergebnis in eine neue Variable ab, die wir 'k' nennen. Stellen Sie sich vor 'y' ist nur eine Zahl 'k <- y + 1'

- Class: cmd_question
  Output: Lasse dir die Variable 'k' in der Konsole ausgeben
  CorrectAnswer: k
  AnswerTests: omnitest(correctExpr='k')
  Hint: Einfach k eingeben und Enter druecken.

- Class: text
  Output: Sehr gut, wie du gesehen hast wusste R, dass wir *jede* Zahl um eins erhoehen
    wollten.

- Class: text
  Output: Nun kann es doch sein, dass dieses Verhalten nicht erwuenscht ist. Es sollen
    z.B nicht alle Werte um eins erhoeht werden, sondern nur ein einziger Wert. Wir
    muessen also auf bestimmte Werte innerhalb des Vektors zugreifen koennen. Auf geht's....
- Class: cmd_question
  Output: Lasse dir den achten Wert des Vektors 'y' ausgeben.
  CorrectAnswer: y[8]
  AnswerTests: omnitest(correctExpr='y[8]')
  Hint: Hierfuer gibt es die eckigen Klammern (''[ ]''). Um beispielsweise den vierten
    Wert eines Vektors 'v' aufzurufen, schreibt man 'v[4]'. Die Antwort lautet also
    'y[8]'

- Class: cmd_question
  Output: Gelegentlich moechte man bestimmte Werte durch andere ersetzen. Hierfuer ruft
    man einen bestimmten Wert auf (mithilfe der eckigen Klammern), und weist diesem
    Wert einen Neuen zu. Das funktioniert genauso wie das Zuweisen einer Zahl zu einer
    Variable, also mit dem assignment-operator bzw. Zuweisungsoperator ('<-'). Ersetze
    nun den achten Wert des Vektors 'y' mit der Zahl 8.
  CorrectAnswer: y[8] <- 8
  AnswerTests: omnitest(correctExpr='y[8] <- 8')
  Hint: So sollte der Befehl aussehen 'y[8] <- 8'

- Class: text
  Output: Wir koennen jetzt auf einzelne Werte zugreifen und somit auch das Problem
    loesen, statt zu allen Werten die Zahl 1 zu addieren, das nur fuer einen bestimmten
    Wert zu tun. Du kannst jetzt gerne eine kurze Pause einlegen mit 'play()' und testen ob du es auch wirklich kannst.

- Class: cmd_question
  Output: Einzelne Werte koennen wir inzwischen aufrufen und auch veraendern, wie ist
    es aber mit mehreren Werten gleichzeitig? Zum Beispiel wuerden wir uns gerne die
    ersten drei Werte des Vektors 'y' anzeigen lassen? Rufe die ersten drei Werte
    von 'y' auf
  CorrectAnswer: y[c(1,2,3)]
  AnswerTests: omnitest(correctExpr='y[c(1,2,3)]')
  Hint: Denkt hierbei an die 'c()'-Funktion zum Erstellen von Vektoren. Wir schreiben
    innerhalb der eckigen Klammern den Vektor 'c(1,2,3)', also so 'y[c(1,2,3)]'

- Class: cmd_question
  Output: Das ist ja alles ganz nett, was aber wenn die Zahlen 1 bis 100 eines
    Vektors mit 1000 Zahlen veraendert werden sollen? Das dauert doch viel zu lang! Ich kann
    euch beruhigen, das tut es nicht, sofern man weiss wie. Ersetze Sie die Zahl 1 im
    Vektor 'y', also die ersten zehn Zahlen, durch Nullen (bitte nicht die Zahlen 1
    bis 10 schreiben).
  CorrectAnswer: y[1:10] <- 0
  AnswerTests: omnitest(correctExpr='y[1:10] <- 0')
  Hint: "Der Doppelpunkt ':' ist hier unser Freund. Falls du die Hilfe zur Benutzung des
    ':' benoetigst, rufe die Hilfe auf ueber help(':'). Die Antwort zur Frage 'y[1:10] <- 0'"

- Class: text
  Output: Wir wollen uns jetzt einigen wichtigen Funktionen widmen, mit denen sich
    statistische Kennwerte berechnen lassen. Wir beginnen mit Variablen mit Nominalskalenniveau (qualitativ),  d.h. solchen, bei denen wir nur sagen koennen ob zwei Werte gleich oder ungleich sind. Das beste Beispiel ist hierfuer das Geschlecht. Wenn eine Person weiblich ist, weisen wir ihr den Wert 1 zu, wenn sie maennlich ist den Wert 0. Du siehst oben rechts in RStudio eine Variable namens 'sex', die nach diesem Muster erstellt wurde.

- Class: mult_question
  Output: Zum jetzigen Zeitpunkt brauchen wir fuer solche Variablen nur eine Funktion
    namens 'table()'. Wofuer ist die Funktion gut? Schaue hierfuer in der Hilfe zu der
    Funktion nach. Sie gibt an...
  AnswerChoices: wie haeufig beide Werte vorkommen; welcher Wert haeufiger vorkommt;
    aus welchen Werten der Vektor besteht
  CorrectAnswer: wie haeufig beide Werte vorkommen
  AnswerTests: omnitest(correctVal= 'wie haeufig beide Werte vorkommen')
  Hint: Schreibe in die Konsole 'table(sex)' und sieh selbst

- Class: text
  Output: Fuer Variablen vom Typ 'metrisch' (Intervallskalenniveau) macht die 'table()'
    Funktion keinen Sinn. Nehmen wir als Beispiel Altersangaben. Es hilft uns wenig
    zu wissen, dass drei der 20 Personen 19 Jahre alt sind. Wir moechten eher wissen,
    wie der Altersdurchschnitt ist und wie alt (jung) die aelteste (juengste) Person
    ist. Interessant waere auch die Standardabweichung bzw. Varianz.

- Class: cmd_question
  Output: Im Fenster rechts oben siehst du neben den Variablen 'y', 'k' und 'sex' noch
    eine weitere Variable 'age'. Um zu wissen, wie viele Personen da nach ihrem Alter
    befragt wurden, benoetigen wir die Laenge des Vektors. Lass dir nun die Laenge des
    Vektors ausgeben
  CorrectAnswer: length(age)
  AnswerTests: omnitest(correctExpr='length(age)')
  Hint: Im Engl. 'length', also 'length(age)'.

- Class: cmd_question
  Output: Alles klar, und wie ist der Altersdurchschnitt?
  CorrectAnswer: mean(age)
  AnswerTests: omnitest(correctExpr='mean(age)')
  Hint: Diesmal uebergeben wir der Funktion 'mean' den Vektor in dem alle Altersangaben
    gespeichert sind, 'mean(age)'.

- Class: cmd_question
  Output: Wie alt ist die juengste Person?
  CorrectAnswer: min(age)
  AnswerTests: omnitest(correctExpr='min(age)')
  Hint: Das minimale Alter erhaelt man mit der 'min()'-Funktion.

- Class: cmd_question
  Output: Wie lautet die Standardabweichung?
  CorrectAnswer: sd(age)
  AnswerTests: omnitest(correctExpr='sd(age)')
  Hint: Im Engl. 'standard deviation', also 'sd(age)'.

- Class: text
  Output: Stellen dir vor, du fuehrst eine Online-Umfrage durch, bei der nur Personen, die
    aelter als 16 Jahre sind, teilnehmen duerfen. Nach der Erhebung der Daten moechtest
    du feststellen, wie viele Personen angegeben haben, dass sie 16 oder juenger sind.
    Die Idee ist dabei folgende, wir ueberpruefen zunaechst jede Altersangabe und geben
    der Person den Wert 'FALSE' wenn sie aelter als 16 ist, und 'TRUE' wenn sie 16
    oder juenger ist.

- Class: cmd_question
  Output: Erzeuge einen Vektor, der den Wert 'TRUE' enthaelt, wenn die Person 16 Jahre
    oder juenger ist, 'FALSE' wenn nicht.
  CorrectAnswer: age<=16
  AnswerTests: omnitest(correctExpr='age<=16')
  Hint: In R koennen wir ueberpruefen, ob eine Zahl gleich einer anderen ist durch ein
    doppeltes Gleichheitszeichen ('=='). '1==0' gibt uns den Wert 'FALSE', denn 1
    ist nicht gleich 0. Ein "Kleiner-Gleich"-Zeichen schreiben wir so '<='. Genau
    wie der der Addition einer Zahl zu jedem Element eines Vektors schreiben wir hier
    statt einer einzelnen Zahl einen Vektor, so 'age<=16'. Das erzeugt einen Vektor
    derselben Laenge wie 'age' mit Werten 'FALSE' oder 'TRUE'.

- Class: cmd_question
  Output: Wenn wir jetzt alle 'TRUE' zaehlen, haben wir unser gewuenschtes Ergebnis,
    naemlich wie viele Personen 16 oder juenger sind. Auf geht's
  CorrectAnswer: sum(age<=16)
  AnswerTests: omnitest(correctExpr='sum(age<=16)')
  Hint: TRUE verhaelt sich wie eine '1' und 'FALSE' wie eine '0'. Das kommt uns zugute,
    denn jetzt koennen wir einfach die Summe dieses Vektors mit lauter 'TRUE' und 'FALSE'
    berechnen. Die Funktion heisst 'sum()', Loesung 'sum(age<=16)'.

- Class: text
  Output: Die letzte Aufgabe ist bekanntlich die Schwerste. Wir wollen nun alle Personen,
    die 16 oder juenger sind aus unserem Vektor entfernen. Ok, und welche Personen
    sind 16 oder juenger? Bislang wissen wir nur wie viele? Das muessen wir zuerst klaeren.

- Class: cmd_question
  Output: Lass dir diejenigen Personen ausgeben, die 16 oder juenger sind. Alternativ
    heisst die Frage - Lass dir die Stellen des Vektors 'age' ausgeben, fuer die
    das Kriterium 16 oder juenger erfuellt ist, die also ein 'TRUE' erhalten. Speichere
    das Ergebnis bitte in den Vektor 'sixteen'.
  CorrectAnswer: sixteen <- which(age<=16)
  AnswerTests: omnitest(correctExpr='sixteen <- which(age<=16)')
  Hint: Die Funktion hierfuer heisst 'which()'. Es heisst also 'sixteen <- which(age
    >=16)'.

- Class: cmd_question
  Output: Nun, da wir wissen wen wir nicht mehr in unserem Ursprungsvektor 'age' haben
    moechten, koennen wir fortfahren und die Personen entfernen. Der 'neue' Vektor 'age'
    sollte dann nicht mehr die Personen beinhalten.
  CorrectAnswer: age <- age[-sixteen]
  AnswerTests: omnitest(correctExpr='age <- age[-sixteen]')
  Hint: Genauso wie wir bestimmte Werte eines Vektors aufrufen koennen, koennen wir
    diese auch entfernen. Wir ueberschreiben 'age', das sieht so aus 'age <- age[-sixteen]'.

- Class: text
  Output: Zugegeben, das war nicht ganz einfach. Man bekommt Routine mit der Zeit.
    Immer wenn das Stichwort "entfernen" faellt, solltet ihr automatisch an das Minuszeichen
    ("-") denken.

- Class: figure
  Output: Well done, du hast es geschafft! Auch wenn du nicht alles auf Anhieb wusstest,
    ist das ueberhaupt kein Problem. Wer soll sich auch von jetzt auch nachher die
    ganzen Funktionen merken?  Wie so oft lautet das Motto uebung macht den Meister.
  Figure: timer_stop.R
  FigureType: new

- Class: figure
  Output: "Hier kommt deine Kennung. Druecke Enter und schicke mir die Kennung ueber das Online-Portal (https://www.soscisurvey.de/stats/). Das Passwort ist dasselbe wie für den Moodle-Zugang."
  Figure: checkCode.R
  FigureType: new


